clearWorkspaceAsRoot()

@Library ("jenkins_library") _

pipeline {

  options {
    buildDiscarder(logRotator(numToKeepStr: '200', daysToKeepStr: '30'))
    ansiColor('xterm')
    timeout time: 60, unit: 'MINUTES'
    timestamps()
  }

  agent {
    docker {
      image 'us.gcr.io/verdant-bulwark-278/jenkins-docker-agent:master.82'
      args "-u root -v /var/run/docker.sock:/var/run/docker.sock"
    }
  }

  stages {
    stage('Building an image') {
      steps {
        script {
          def imageName = "blazemeter/taurus"
          buildImage(imageName)
        }
      }
    }

    stage('Pushing an image') {
      steps {
        script {
          pushImage(imageName)
        }
      }
    }
  }
}

def buildImage(imageName) {
  def editedBranch = BRANCH_NAME.replaceAll("/", "-")
  if (BRANCH_NAME == 'master') {
      imageTag = "${imageName}:unstable"
  } else if (BRANCH_NAME.startsWith('release-')) {
      imageTag = "${imageName}:${editedBranch}"
  } else if (env.TAG_NAME) {
      imageTag = "${imageName}:${env.TAG_NAME} -t ${imageName}:latest"
  } else {
      error('Aborting build triggered by wrong branch or tag')
  }
  sh "docker build --no-cache -t ${imageTag} ."
}

def pushImage(imageName) {
  withDockerRegistry([ credentialsId: "dockerhub-access", url: "" ]) {
    sh "docker push ${imageName}"
  }
}
